name: Build and Test
on:
  workflow_call:
    inputs:
      collect_coverage:
        required: false
        default: false
        type: boolean
      retention-days:
        description: >
          Duration after which the uploaded coverage artifacts will expire in days, or 0 to use the default setting 
          for the repository.
        required: false
        default: "0"
        type: string

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    # Set `RUSTFLAGS` once for all cargo commands so that changing these flags
    # doesn't trigger a fresh build.
    env:
      RUSTFLAGS: '-D warnings -F unsafe-code'

    steps:
      - name: Check initialize disk space
        shell: bash
        run: df -h
      # Based on https://github.com/easimon/maximize-build-space
      - name: Free disk space
        shell: bash
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
      - name: Check final disk space
        shell: bash
        run: df -h
      - name: Set environment variables for coverage collection
        if: ${{ inputs.collect_coverage }} && ${{ matrix.toolchain }} == 'stable'
        shell: bash
        run: |
          echo "RUSTFLAGS=${RUSTFLAGS} -C instrument-coverage" >> $GITHUB_ENV
          echo "LLVM_PROFILE_FILE=cedar_%m_%p.profraw" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: cargo install cargo-audit --locked
      - run: ./rust/panic_safety.sh
      - run: cargo doc --all-features --no-deps
        working-directory: rust/

      # All targets are run with the same `RUSTFLAGS
      - run: cargo build --verbose
        working-directory: rust/
      - run: cargo test --verbose
        working-directory: rust/
      - run: cargo test --verbose --benches
        working-directory: rust/
      - run: cargo test --verbose --no-default-features
        working-directory: rust/
      - run: cargo audit --deny warnings # For some reason this hangs if you don't cargo build first
        working-directory: rust/

      - name: Create a coverage report
        if: ${{ inputs.collect_coverage }} && ${{ matrix.toolchain }} == 'stable'
        uses: ./.github/actions/create_coverage_reports
        with:
          retention-days: ${{ inputs.retention-days }}

  # Clippy in its own job so that the `RUSTFLAGS` set for `build_and_test`
  # don't effect it. As a side effect, this will run in parallel, saving some
  # time.
  clippy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: rustup component add clippy
      # Clippy is configured by `.cargo/config.toml` to deny on lints like
      # `unwrap_used`. They aren't detected by `panic_safety.sh` which only
      # looks for comments where we've added an `allow` directive for clippy.
      - run: cargo clippy --all-features
        working-directory: rust/

  # Run `cargo fmt` independently so that tests are executed even if you forgot
  # to format before pushing.
  format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: rustup component add rustfmt
      - run: cargo fmt --all --check
        working-directory: rust/

  cargo-deny:
    name: cargo deny
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          manifest-path: rust/Cargo.toml

  # See https://doc.rust-lang.org/cargo/guide/continuous-integration.html#verifying-rust-version
  msrv:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: taiki-e/install-action@cargo-hack
    - run: cargo hack check --rust-version --workspace --all-targets --ignore-private --all-features
      working-directory: rust/